}
#param ncomp
#choix du nombre idéal de composantes principales
if(ncomp == "CV") {
ncomp = plsda.cv()$ncomp
}else if(!is.numeric(ncomp) || is.null(ncomp) || ncomp <= 0 || length(ncomp)>1){
stop("parametre ncomp doit etre un numerique ")
}else if(ncomp > qr(X)$rank){
ncomp <- qr(X)$rank
}
#si X est a standardiser
if ((round(mean(apply(X,2,mean))) != 0) || (sum(sqrt(apply(X,2,var))) != ncol(X))){
X <- plsda.scale(X)
}
#codage disjonctif de la variable cible
ydum <- plsda.dummies(y)
#Appel de la nipals pour effectuer la regression PLS#
nipals.res <- plslda.nipals(X=X, y=ydum, ncomp=ncomp , max.iter=max.iter, tol=tol)
nipals.res
#ici on effectue la LDA pour la classification
#on l'a fait sur nos compossntes principales Th, obtenues en sorties de la PLS
Th <- nipals.res$comp_X
#effectif par classe
n_k <- table(y)
#nombre d'individus
n <- nrow(Th)
#nombre de modalite
K <- nlevels(y)
#nombre de variables desc
p <- ncol(Th)
#proportion par classe
pi_k <- n_k / n
#calcul des moyennes conditionelles - lignes = classes
mb_k <- as.matrix(aggregate(Th,list(y),mean)[,2:(p+1)])
#calcul des matrices de covariances conditionnelles
V_k <- by(as.matrix(Th),list(y),cov)
#matrice de covariance intra-classe W
#calculée à partir des matrices conditionnelles V_k
W <- 1/(n-K) * Reduce("+",lapply(levels(y),function(k){(n_k[k]-1)*V_k[[k]]}))
#inverse de la matrice W
invW <- solve(W)
#calcul des coefficients des variables akj
#pour la fonction de classement
coef_ <- t(mb_k %*% invW)
colnames(coef_) <- levels(y)
intercept_ <- log(pi_k)-0.5*diag(mb_k %*% invW %*% t(mb_k))
coef_ <- as.matrix(nipals.res$poid_X)%*%coef_
coef_ <- diag(1/apply(X.init, 2, sd)) %*% coef_
intercept_ <- as.vector(-apply(X.init, 2, mean) %*% coef_) #TODO corriger ce calcul...
nipals.res$coef_
View(X)
#mettre dans un data.frame les coef et constant pour le print
coef <- data.frame(Attributes = colnames(X),coef_)
coef
cte <- data.frame(Attributes = "constant",t(intercept_))
cte
colnames(cte)[1:K+1] <- levels(nipals.res$y)
nipals.res$y
levels(nipals.res$y)
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package")
data = read_excel("Data_LDA_Python.xlsx")
newdata = read_excel("Data_LDA_Python.xlsx", sheet="DATA_PREDICT")
formula=TYPE~.
source("code/fit.R")
source("code/dummies.R")
source("code/cv.r")
source("code/nipals.r")
source("code/scale.R")
source("code/scale.R")
source("code/predict.r")
source("code/split_sample.r")
object = plslda.fit(formula, data=data)
object
object$quality
#proportion des variances expliquée des Z
ggplot(object$quality, aes(x = index, y = R2Ycum, color = drv, linetype = trans)) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(object$quality, aes(x = nrow(object$quality), y = R2Ycum, color = drv, linetype = trans)) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
nrow(object$quality)
#proportion des variances expliquée des Z
ggplot(object$quality, aes(y = R2Ycum, color = drv, linetype = trans)) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(as.data.frame(object$quality), aes(y = R2Ycum, color = drv, linetype = trans)) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(as.data.frame(object$quality), aes(y = R2Ycum, color = "grey", linetype = trans)) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(as.data.frame(object$quality), aes(y = R2Ycum, color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(as.data.frame(object$quality), aes(x="",y = R2Ycum, color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
ggplot(as.data.frame(object$quality), aes(x=R2Ycum,y = "", color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
as.data.frame(object$quality)
rownames(as.data.frame(object$quality))
ggplot(prop, aes(x=R2Ycum,y = rownames(prop), color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
#proportion des variances expliquée des Z
prop <- as.data.frame(object$quality)
ggplot(prop, aes(x=R2Ycum,y = rownames(prop), color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, color = "grey")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, color = "black")) +
geom_point(size = 1.5) +
geom_line(alpha = 0.5)
function (x, do.NULL = TRUE, prefix = "row")
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, color = "black")) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, color = "black")) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, color = black)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, linetype = trans)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, linetype = R2Ycum)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, linetype = prop)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum, linetype = rownames(prop))) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum) +
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
geom_point(size = 1.5) +
geom_line()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
geom_line()+
geom_point(size = 1.5)
ggplot(prop, aes(x=rownames(prop),y = R2Ycum)) +
geom_line()+
geom_point()
ggplot(prop, aes(x=rownames(prop),y = R2Ycum))+ geom_line(color="lightblue") + geom_point(color="violetred")
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p + geom_line(color="lightblue") + geom_point(color="violetred")
p + geom_line(color="lightblue")
function (x, do.NULL = TRUE, prefix = "row")
{
dn <- dimnames(x)
if (!is.null(dn[[1L]]))
dn[[1L]]
else {
nr <- NROW(x)
if (do.NULL)
NULL
else if (nr > 0L)
paste0(prefix, seq_len(nr))
else character()
}
}
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p + geom_line(color="lightblue") + geom_point(color="violetred")
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package")
data = read_excel("Data_LDA_Python.xlsx")
newdata = read_excel("Data_LDA_Python.xlsx", sheet="DATA_PREDICT")
formula=TYPE~.
source("code/fit.R")
source("code/dummies.R")
source("code/cv.r")
source("code/nipals.r")
source("code/scale.R")
source("code/scale.R")
source("code/predict.r")
source("code/split_sample.r")
object = plslda.fit(formula, data=data)
#proportion des variances expliquée des Z
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p + geom_line(color="lightblue") + geom_point(color="violetred")
Ypls = cbind(object$comp_X, y=as.matrix(object$y))
PC1 = PC1
PC2 = PC2
PC1 = "PC1"
PC2 = "PC2"
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
mat.corr <- cor(as.matrix(object$y), object$comp_X)^2
usedComp <- "X1"
ordre <- order(object$poid_X[,usedComp])
X <- as.data.frame(X)
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package")
data = read_excel("Data_LDA_Python.xlsx")
newdata = read_excel("Data_LDA_Python.xlsx", sheet="DATA_PREDICT")
formula=TYPE~.
source("code/fit.R")
source("code/dummies.R")
source("code/cv.r")
source("code/nipals.r")
source("code/scale.R")
source("code/scale.R")
source("code/predict.r")
source("code/split_sample.r")
object = plslda.fit(formula, data=data)
usedComp <- "X1"
ordre <- order(object$poid_X[,usedComp])
X <- as.data.frame(object$X.init)
mat.corr <- cor(X[ordre])
corrplot::corrplot(mat.corr)
#proportion des variances expliquée des Z
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p + geom_line(color="lightblue") + geom_point(color="violetred")
cercle_correlation.PLSDA(objct, "PC1", "PC2")
#representation des y sur 2 axes
cercle_correlation.PLSDA <- function(object, PC1, PC2){
Ypls = cbind(object$comp_X, y=as.matrix(object$y))
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
}
cercle_correlation.PLSDA(objct, "PC1", "PC2")
cercle_correlation.PLSDA(object, "PC1", "PC2")
#projection des variables
plan_factoriel.PLSDA(object, X1, X1){
#projection des variables
plan_factoriel.PLSDA <- function(object, X1, X1){
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
}
#projection des variables
plan_factoriel.PLSDA <- function(object, X1, X1){
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
}
#projection des variables
plan_factoriel.PLSDA <- function(object, X1, X2){
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
}
plan_factoriel.PLSDA(object, "X1", "X2")
#matrice de correlation
correlationplot.PLSDA <- function(object, usedComp){
ordre <- order(object$poid_X[,usedComp])
X <- as.data.frame(object$X.init)
mat.corr <- cor(X[ordre])
corrplot::corrplot(mat.corr)
}
correlationplot.PLSDA(object,"X1")
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p + geom_line(color="lightblue")
+ geom_point(color="violetred")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p
+ geom_line(color="lightblue")
+ geom_point(color="violetred")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred") +
scale_x_discrete(name ="Composantes") +
scale_y_discrete(name ="% explication")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred") +
scale_x_continue(name ="Composantes") +
scale_y_continue(name ="% explication")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred") +
scale_x_continuous(name ="Composantes") +
scale_y_continuous(name ="% explication")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred") +
xlab("Composantes") +
ylab("% explication")
#+
}
propz.PLSDA(object)
#proportion des variances expliquée des Z
propz.PLSDA <- function(object){
prop <- as.data.frame(object$quality)
p <- ggplot(prop, aes(x=rownames(prop),y = R2Ycum))
p +
geom_line(color="lightblue") +
geom_point(color="violetred") +
labs(title="Proportion des variances expliquée des Z",
x ="Composantes", y = "% explication")
#+
}
propz.PLSDA(object)
#projection des variables
plan_factoriel.PLSDA <- function(object, X1, X2){
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred') +
labs(title="Proportion des variances expliquée des Z",
x ="Composantes", y = "% explication")
}
plan_factoriel.PLSDA(object, "X1", "X2")
#projection des variables
plan_factoriel.PLSDA <- function(object, X1, X2){
Xpls <- as.data.frame(object$poid_X)
ggplot() +
geom_text(data=Xpls, aes(x = X1, y = X2, label = rownames(Xpls)), col = 'red') +
geom_segment(data=Xpls, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred') +
labs(title="Projection des variables sur les 2 axes factoriel",
x ="Dim 1", y = "Dim 2")
}
plan_factoriel.PLSDA(object, "X1", "X2")
#representation des y sur 2 axes
cercle_correlation.PLSDA <- function(object, PC1, PC2){
Ypls = cbind(object$comp_X, y=as.matrix(object$y))
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
}
cercle_correlation.PLSDA(object, "PC1", "PC2")
#representation des y sur 2 axes
cercle_correlation.PLSDA <- function(object, PC1, PC2){
Ypls = cbind(object$comp_X, y=as.matrix(object$y))
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black") +
labs(title="Projection des individus sur les 2 axes factoriel",
x ="Dim 1", y = "Dim 2", fill = "Modalitées")
}
cercle_correlation.PLSDA(object, "PC1", "PC2")
object
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package")
data = read_excel("Data_LDA_Python.xlsx")
newdata = read_excel("Data_LDA_Python.xlsx", sheet="DATA_PREDICT")
formula=TYPE~.
source("code/fit.R")
source("code/dummies.R")
source("code/cv.r")
source("code/nipals.r")
source("code/scale.R")
source("code/scale.R")
source("code/predict.r")
source("code/split_sample.r")
object = plslda.fit(formula, data=data)
object
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package")
data = read_excel("Data_LDA_Python.xlsx")
newdata = read_excel("Data_LDA_Python.xlsx", sheet="DATA_PREDICT")
formula=TYPE~.
source("code/fit.R")
source("code/dummies.R")
source("code/cv.r")
source("code/nipals.r")
source("code/scale.R")
source("code/scale.R")
source("code/predict.r")
source("code/split_sample.r")
object = plslda.fit(formula, data=data)
#representation des y sur 2 axes
cercle_correlation.PLSDA <- function(object, PC1, PC2){
Ypls = cbind(object$comp_X, y=as.matrix(object$y))
ggplot(Ypls, aes(x=PC1, y=PC2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black") +
labs(title="Projection des individus sur les 2 axes factoriel",
x ="Dim 1", y = "Dim 2", fill = "Modalitées")
}
cercle_correlation.PLSDA(object, "PC1", "PC2")
object
ypred = plslda.predict(object,newdata)
ypred
y=data_split$ytest
data = iris
formula = Species~.
data_split = plsda.split_sample(formula, data)
data = data_split$train
newdata = data_split$Xtest
object = plslda.fit(formula, data=data)
object
ypred = plslda.predict(object,newdata)
ypred
y=data_split$ytest
confusionTable <- table(y, ypred)
confusionTable
precision <- confusionTable[i, i] / sum(confusionTable[, i])
for(i in 1:nrow(confusionTable)){
precision <- confusionTable[i, i] / sum(confusionTable[, i])
riccol <- confusionTable[i, i] / sum(confusionTable[i,])
fscore <- (2 * precision * riccol) / (precision + riccol)
precisionVector <- append(precisionVector, precision)
recallVector <- append(recallVector, riccol)
fscoreVector <- append(fscoreVector, fscore)
}
confusionTable <- table(y, ypred)
precisionVector <- c()
recallVector <- c()
fscoreVector <- c()
for(i in 1:nrow(confusionTable)){
precision <- confusionTable[i, i] / sum(confusionTable[, i])
riccol <- confusionTable[i, i] / sum(confusionTable[i,])
fscore <- (2 * precision * riccol) / (precision + riccol)
precisionVector <- append(precisionVector, precision)
recallVector <- append(recallVector, riccol)
fscoreVector <- append(fscoreVector, fscore)
}
Yweights <- table(y) / length(y)
globalFscore <- sum(fscoreVector * Yweights, na.rm=T)
res <- list("ConfusionTable" = confusionTable,
"Precision" = precisionVector,
"Recall" = recallVector,
"Fscore" = fscoreVector,
"GlobalFscore" = globalFscore)
res
cm <- table(y, ypred)
ct <- sum(cm)
cs <- colSums(cm)
rs <- rowSums(cm)
tp <- diag(cm)
tn <- ct - (rs + cs - tp)
fp <- rs - tp
fn <- cs - tp
pr <- tp / (tp + fp)
re <- tp / (tp + fn)
f1 <- 2 * pr * re / (pr + re)
ac <- sum(tp) / ct
list(summary=round(data.frame(tp, tn, fp, fn, precision=pr, recall=re, f1_score=f1, support=cs), dp),
accuracy=round(ac, dp),
support=ct)
dp=2
list(summary=round(data.frame(tp, tn, fp, fn, precision=pr, recall=re, f1_score=f1, support=cs), dp),
accuracy=round(ac, dp),
support=ct)
?round
