cols=c("Marque", "Modele", "Type", "Prix", "Km")
print(df[df$Marque=="Pontiac",cols])
Marque = Pontiac et Prix > 20000 et Prix < 25000
print(df[df$Marque=="Pontiac" & df$Prix > 20000 & df$Prix < 25000, cols])
print(table(df$Type))
print(table(df[df$Marque==c("Pontiac", "Chevrolet")]))
print(table(df[df$Marque=="Pontiac" & df$Marque=="Chevrolet")]))
print(table(df[df$Marque=="Pontiac" & df$Marque=="Chevrolet"]))
print(table(df[df$Marque=="Pontiac" & df$Marque=="Chevrolet",]))
df[df$Marque=="Pontiac" & df$Marque=="Chevrolet",]
df[df$Marque=="Pontiac" & df$Marque=="Chevrolet",cols]
print(df[df$Marque=="Pontiac" & df$Marque=="Chevrolet",cols])
print(df[df$Marque=="Pontiac" & df$Prix > 20000 & df$Prix < 25000, cols])
print(df[df$Marque=="Pontiac" | df$Marque=="Chevrolet",cols])
print(table(df[df$Marque=="Pontiac" | df$Marque=="Chevrolet",]))
print(table(df[df$Marque=="Pontiac" | df$Marque=="Chevrolet",cols]))
print(df[df$Marque=="Pontiac" | df$Marque=="Chevrolet",cols])
df_pont_chev = df[df$Marque=="Pontiac" | df$Marque=="Chevrolet",cols]
print(table(df_pont_chev$Type))
#6
df_prix = order(df)
#6
df_prix = order(df$Prix)
print(df_prix)
#6
df_prix = order(df$Prix,15)
#6
print(head(order(df$Prix,15))
#6
print(head(order(df$Prix,15)))
#6
print(head(order(df$Prix,15)))
#6
print(head(df[order(df$Prix),]))
#6
print(head(df[order(df$Prix),cols],n=5))
#7
df_sed=df[df$Type=="Sedan",cols]
print(head(df_sed[order(df_sed$Prix),cols],n=5))
df
#8
print(table(df[df$HiFi=="oui" & df$Cuir == "oui"]))
#8
print(table(df[df$HiFi=="oui" & df$Cuir == "oui",]))
#8
print(table(df[df$HiFi=="oui" & df$Cuir == "oui",cols]))
#8
print(table(df[df$HiFi=="oui" & df$Cuir == "oui",cols]$Marque))
#9
print(table(df[df$Cuire=="oui",]$Marque) / table(df[df$HiFi=="oui",]$Marque))
#9
print(table(df[df$Cuir=="oui",]$Marque) / table(df[df$HiFi=="oui",]$Marque))
#9
t = table(df[df$Cuir=="oui" & df$HiFi == "oui",]$Marque)
#9
print(prop.t)
print(prop.table(t))
#9
t = table(df[df$Cuir=="oui" & df$HiFi == "oui",])
#9
t = ncol(df[df$Cuir=="oui" & df$HiFi == "oui",])
print(t/ncol(df))
t
#9
t = nrow(df[df$Cuir=="oui" & df$HiFi == "oui",])
t
print(t/ncol(df))
print(ncol(df)/t)
print(t/nrow(df))
t
print(t/nrow(df))
print(t/p)
#9
t = nrow(df[df$Cuir=="oui",])
p =  nrow(df[df$HiFi == "oui",])
print(t/p)
#9
cuir = nrow(df[df$Cuir=="oui",])
hifi =  nrow(df[df$HiFi == "oui",])
print(cuir/hifi)
hifi
print(prop.table(table(df$Cuir,df$HiFi),1)["oui","oui"])
print(hifi/cuir)
#10
print(tapply(df$Prix,df$Type,mean))
#11
print(tapply(df$Prix,df$Type,mean), decreasing=TRUE)
#11
print(tapply(sort(df$Prix,df$Type,mean), decreasing=TRUE))
#11
print(sort(tapply(df$Prix,df$Type,mean), decreasing=TRUE))
#12
print(tapply(df$Prix,df[df$Cuir=="oui"&df$HiFi=="oui",],mean))
#12
print(tapply(df$Prix,df[df$Cuir=="oui"&df$HiFi=="oui",c("Prix")],mean))
#12
print(tapply(df$Prix,INDEX = list(df$Cuir,df$HiFi),mean))
x=data(mtacrs)
x=data(mtcqrs)
x=data(,tcqrs)
x=data(mtcars)
x
head(mtcars)
class(mtcars)
quantil(mtcars$mpg)
quantile(mtcars$mpg)
quantile(mtcars$mpg, 75)
quantile(mtcars$mpg)$75%
class(quantile(mtcars$mpg))
quantile(mtcars$mpg)[3]
quantile(mtcars$mpg)[4]
}
intervalle_interquartile = function(x){
if (is.numeric(x) =! TRUE){
source("~/M2/R/seance_4/ex2.R")
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
print(NA)
break
}
return(quantile(x)[4]-quantile(x)[2])
}
sapply(mtcars,intervalle_interquartile)
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
return(NA)
}
return(quantile(x)[4]-quantile(x)[2])
}
sapply(mtcars,intervalle_interquartile)
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
return(NA)
}
return(quantile(x)[[4]]-quantile(x)[[2]])
}
sapply(mtcars,intervalle_interquartile)
sapply(iris,intervalle_interquartile)
iris
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t")
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", header=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", h=T, sep="\t",)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt",  sep="\t",h=T)
df_auto
centre_reduire = function(x){
x-mean(x)/sd(x)
}
centre_reduire = function(x){
x-mean(x)/sd(x)
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire())
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
centre_reduire = function(x){
return(x-mean(x)/sd(x))
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire())
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
liste = lapply(df,centre_reduire)
centre_reduire = function(x){
return(x-mean(x)/sd(x))
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
df_num = lapply(df,class="integer")
df_num = lapply(df_auto,class="integer")
df_num = lapply(df_auto,class)=="integer"
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num,centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
test = lapply(df_auto, class)=="integer"
test
df_auto[,test]
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num[,df_num],centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num[,df_num],centre_reduire)
return(df)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_CR=df_centre_reduire(df_auto)
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df[,df_num],centre_reduire)
return(df)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_CR=df_centre_reduire(df_auto)
df_CR
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T,row.names=1,dec=".")
df_auto
df_CR=df_centre_reduire(df_auto)
df_CR
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,row.names=1,dec=".")
df_auto
print(lapply(df_auto,is.na))
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,row.names=1,dec=".", na.strings="?")
df_auto
print(lapply(df_auto,is.na))
print(lapply(df_auto,is.na)==T)
print(lapply(df_auto,is.na)==T)
print(lapply(dfna.omit)
print(lapply(dfna.omit))
print(lapply(df,na.omit))
print(df[lapply(df_auto,is.na),])
print(df[lapply(df_auto,is.na)==T,])
print(df[lapply(df_auto,is.na)=="T",])
print(df[lapply(df_auto,is.na)=="TRUE",])
print(lapply(df,length)))
function (object, ...)
print(length(lapply(df,na.omit)))
print(lapply(df,length))
print(class(lapply(df,na.omit)))
print(length(lapply(df,na.omit)))
print(length(lapply(df,na.omit))[[1]])
print((lapply(df,na.omit))[[1]])
sum(is.na(df_auto))
print((lapply(df,na.omit)))
print(lapply(df_auto,is.na))
print(class(lapply(df_auto,is.na)))
print(lapply(df_auto,is.na)[1])
sum(is.na(df_auto))
is.na(df_auto)
is.na(df_auto$CYL)
df_auto$CYL[,is.na(df_auto$CYL)]
df_auto$CYL[is.na(df_auto$CYL)]
x=df_auto$CYL
x
x[is.na(x)] = mean(x)
x
getmod=function(v){
uniqv=unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
getmod=function(v){
uniqv=unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
getmod=function(v){
uniqv<-unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
df_no_missing = df_val_missing(df_auto)
x
df_auto
x=df_auto$FINITION
x
unique(x)
which.max(tabulate(match(v,unique(x))))
which.max(tabulate(match(x,unique(x))))
match(x,unique(x))
tabulate(match(x,unique(x)))
un=unique(x)
tabulate(match(x,un)
)
which.max(tabulate(match(x,un)))
un(which.max(tabulate(match(x,un))))
getmod=function(v){
uniqv=unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
x=replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
x=replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
is.numeric(df_auto$PRIX)==T
is.numeric(df_auto$PRIX)
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,dec=".", na.strings="?")
df_auto
is.numeric(df_auto$FINITION)
getmod=function(v){
uniqv=unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
x=replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
print("pas num")
x=replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
df_val_missing=function(df){
df = sapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
untar("Téléchargements/pls_2.8-1.tar.gz", list=T)
untar("C:/Users/pauli/Downloads/pls_2.8-1.tar.gz", list=T)
getwd()
untar("C:/Users/pauli/Downloads/pls_2.8-1.tar.gz")
untar("C:/Users/pauli/Downloads/mixOmics_6.22.0.tar")
untar("C:/Users/pauli/Downloads/mixOmics_6.22.0.tar.gz")
getdir
getdir()
ls
dir
getdir
getwd
untar("C:/Users/pauli/Downloads/nipals_0.8.tar.gz")
getwd()
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github('paulineattal/PLSDA_R_Package', subdir='/plslda')
remove.packages("plslda5")
library(plslda)
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package/")
library(readr)
data = read.table("zoo.csv", sep=";", header=TRUE)
formula = classe~.
print(head(data))
#selection de variables
print("Noms des variables avant séléction : ")
print(colnames(data))
sel.data = sel.forward(formula=formula, data=data)
print("Noms des variables apres séléction : ")
print(colnames(sel.data))
#split datas
print("Nombre de ligne total du jeu de données : ")
print(nrow(sel.data))
data_split = plslda.split_sample(formula=formula, data=sel.data)
print("Nombre de ligne du jeu d'entrainement : ")
print(nrow(data_split$train))
print("Nombre de lignes du jeu de test : ")
print(nrow(data_split$Xtest))
#fit
object =plslda.fit(formula=formula, data=data_split$train, ncom=5)
print("classe de l'object : ")
print(class(object))
#predict
ypred = plslda.predict(object=object, newdata=data_split$Xtest)
print(data.frame(ypred=as.factor(ypred), y=data_split$ytest))
#metrics
metrics <- plslda.metrics(y=data_split$ytest, ypred=ypred)
print(metrics)
#fonctions surchargées
print(object)
summary(object)
cercle_correlation.PLSDA(object=object, "PC1", "PC2")
data = read.table("zoo.csv", sep=";", header=TRUE)
data
data = read.table("zoo.csv", sep=",", header=TRUE)
data
formula = animal_name~.
print(head(data))
#selection de variables
print("Noms des variables avant séléction : ")
print(colnames(data))
sel.data = sel.forward(formula=formula, data=data)
data
class(data)
data = read.table("zoo.csv", sep=",", header=TRUE)
formula = animal_name~.
print(head(data))
#selection de variables
print("Noms des variables avant séléction : ")
print(colnames(data))
sel.data = sel.forward(formula=formula, data=data)
slentry = 0.01
verbose=FALSE
#paramètre verbose
if(!is.logical(verbose)){
stop("Erreur : parametre verbose mal rensigné, il doit etre de type logical")
}
#paramètre formula
if(plyr::is.formula(formula)==F){
stop("Erreur : formula doit etre de type formula")
}
#paramètre data
if (!is.data.frame(data)){
stop("Erreur : data doit être un data.frame")
}
X <- as.matrix(model.matrix(formula, data = data)[,-1])
y <- as.factor(model.response(model.frame(formula, data = data)))
nbNumeric<- sum(sapply(X,is.numeric))
if(nbNumeric<ncol(X)){
stop("Erreur : certaines variables ne sont pas numeriques")
}
#nombre d'obs.
n <- nrow(X)
#nombre d'explicatives
p <- ncol(X)
#nombre de modalités de la cible, y est forcément un factor
K <- nlevels(y)
#modalités
K_values <- levels(y)
#Var.covar conditionnelles
lst_Vk <- lapply(K_values,function(k){m_k <- as.matrix(X[y==k,]);(nrow(m_k)-1)*cov(m_k)})
#matrice W - cov. intra-classes -- biaisée
W <- Reduce("+",lst_Vk)/(n)
#matrice V - cov. totale
V <- (n-1)/n*cov(X)
curVars <- c() #variables actuellement sélectionnées
class(lst_Vk)
lst_Vk
X <- as.matrix(model.matrix(formula, data = data)[,-1])
y <- as.factor(model.response(model.frame(formula, data = data)))
X
y
nbNumeric<- sum(sapply(X,is.numeric))
nbNumeric
X
#nombre d'obs.
n <- nrow(X)
n
p
K
y
