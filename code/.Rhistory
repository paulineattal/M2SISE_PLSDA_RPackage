source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
clear
cls
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
clear
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
clear
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
clear
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/racines_polynome.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/calcul_factoriel.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nb_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/somme_diviseur.R")
source("~/R/TD_1/somme_diviseur.R")
source("~/R/TD_1/somme_diviseur.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
7
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
12
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
source("~/R/TD_1/Nombre_premier.R")
clear
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(parallel)
install.packages('doParallel')
library(doParallel)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(etendue_sequentiel(test))
print(minmax(test))
print(minmax(test)[1])
print(minmax(test)[2])
print(etendue_sequentiel(test))
source("~/.active-rstudio-document")
test<-rnorm(1000, mean = 0, sd = 1)
test
test<-rnorm(10, mean = 0, sd = 1)
test
test
system.time(etendue_sequentiel(test))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(system.time(parApply(test, FUN = etendue_sequentiel, x=test))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
clust<-makeCluster(n.cores)
n<-detectCores()
clust<-makeCluster(n.cores)
n.cores<-detectCores()
clust<-makeCluster(n.cores)
clusterExport(clust, test)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(my_maxmim(test)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
n.cores
n.cores <- detectCores()
n.cores
clust<-makeCluster(n.cores)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(etendue_sequentiel(test))
print(my_maxmim(test))
source("~/.active-rstudio-document")
result <- etendue_sequentiel(test)
print(class(result))
print(class(my_maxmim(test)))
source("~/.active-rstudio-document")
print(etendue_sequentiel(test, my_maxmim))
print(system.time(etendue_sequentiel(test, my_maxmim)))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(paste(test, my_maxmim(test)))
source("~/.active-rstudio-document")
print(test, my_maxmim(test))
print(my_maxmim(test))
test<-rnorm(10, mean = 0, sd = 1)
print(test)
print(my_maxmim(test))
source("~/.active-rstudio-document")
clear
read.table('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
read.table('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
read.csv('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
df <- read.csv('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
df
plot(df)
plot(df$x)
mean(df$x)
tmp <- acf(df$x, type = 'cor', plot=T)
df <- read.csv('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
plot(df$x)
mean(df$x)
varicelle <- ts(df$x, start=c(1931,1), end = c(1972, 6), freq=12)
tmp <- acf(varicelle, type = 'cor', plot=T)
install.packages(forecast)
install.packages('forecast')
ggseasonplot(varicelle)
library(forecast)
df <- read.csv('https://eric.univ-lyon2.fr/jjacques/Download/DataSet/varicelle.csv')
plot(df$x)
mean(df$x)
varicelle <- ts(df$x, start=c(1931,1), end = c(1972, 6), freq=12)
tmp <- acf(varicelle, type = 'cor', plot=T)
ggseasonplot(varicelle)
ggseasonplot(varicelle, polar = T)
varicelle
apply(varicelle, sum)
lapply(varicelle, sum)
sapply(varicelle, sum)
print(i)
foreach(i=1:nrow(varicelle)){
foreach(i=1:nrow(varicelle)) %do% {
print(i)
}
nrow(varicelle)
length(varicelle)
summary(varicelle)
varicelle
length(varicelle)
names(varicelle)
nrow(varicelle)
plot(aggregate(varicelle, nfrequency = 1))
library(readxl)
library(plyr)
library(doParallel)
library(foreach)
setwd('C:/Users/pdubrulle/PLSDA_R_Package/code/')
source('fit.R')
source('predict.R')
source('scale.R')
source('dummies.R')
source('nipals.r')
plsda.cv<-function(formula,data){
#TODO : adapter la taille du nfold en fonction de la taille du jeu de données
nfold=10
#Vérification que l'entrée est bien une formule Y~X
if(plyr::is.formula(formula)==F){
stop("formula must be R formula !")
}
#Récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
Y <- as.factor(model.response(model.frame(formula, data = data)))
PRESS <- NULL
#rang de la matrice X
#au max on peut avoir rang(matrice) composantes
ncomp <- qr(X)$rank
for(j in 1:ncomp){
foreach(j=1:ncomp) %dopar% {
#initialisation du critere d'optimisation
press <- NULL
#shuffle le jeu de données
s<-sample(1:nrow(X),nrow(X))
newX <- X[s,]
newY <- Y[s]
#creer les indices pour le nfolds
folds <- cut(seq(1, nrow(X)), breaks = nfold, labels=FALSE)
for(i in 1:nfold){
#foreach(i=1:nfold) %dopar% {
#recuperer les indices pour le fold en cours
indexes <- which(folds == i, arr.ind = TRUE)
#on divise les données en test et entraînement
X.train <- newX[-indexes,]
X.test <- newX[indexes,]
Y.train <- newY[-indexes]
Y.test <- newY[indexes]
train <- data.frame("Y"=Y.train, X.train)
#on exécute le modèle sur les données d'appprentissage
fit<-fit(Y~., train, ncomp = j)
#on fait la prédiction sur X.test
pred <- plsda.predict(fit, X.test)
#dummies les pred
#ajout du Y en deuxieme parametre de dummies
#complete le dummies avec une colonne a 0 si aucune pred pour un modalité
pred <- plsda.dummies(pred, Y)
Y.test <- plsda.dummies(Y.test)
#print(paste(nrow(Y.test), ncol(Y.test)))
#print(paste(nrow(pred), ncol(pred)))
#on calcule le press pour le ième échantillon
press[i] <- sum((Y.test-pred)^2)
}
PRESS[j] <-as.numeric(sum(press))
}
#recuperer le ncomp sur pour lequel le press a ete le plus petit
ncomp <- which.min(PRESS)
min.PRESS <- PRESS[ncomp]
object=list("ncomp" = ncomp,
"PRESS" = PRESS,
"min.PRESS" = min.PRESS)
class(object)<-"CV"
return(object)
}
data(iris)
plsda.cv(Species~., iris)
