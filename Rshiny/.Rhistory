runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
install.packages('devtools')
devtools::install_github('paulineattal/PLSDA_R_Package', subdir='/plslda')
#library(plslda)
setwd('/home/pierre/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/plslda/R/')
source('cv.R')
library(ggplot2)
#library(plslda)
setwd('/home/pierre/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/plslda/R/')
source('cv.R')
source('dummies.R')
source('fit.R')
source('nipals.R')
source('plots.R')
source('predict.R')
source('scale.R')
source('sel_forward.R')
source('split_sample.R')
shiny::runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
plslda.fit <- function(formula, data,
ncomp = 2, #ici on peut mettre "CV"
max.iter = 100,
tol = 1e-06)
{
###########################
#vérifications des entrées#
###########################
#paramètres renseignés
if ((missing(data) | missing(formula))){
stop("Erreur : formula et data sont les deux paramètres obligatoires")
}
#paramètres formula
if(plyr::is.formula(formula)==F){
stop("Erreur : formula doit etre de type formule")
}
#paramètres data
if (!is.data.frame(data)){
stop("Erreur : data doit être un data.frame")
}
#ligne.s ou colonne.s entièrement vide.s ?
if (any(colSums(!is.na(data)) == 0) | any(rowSums(!is.na(data)) == 0 )){
stop("Erreur : certaines lignes ou colonnes sont entierements manquantes",
"Retirez-les avant de relancer la fonction fit().")
}
#récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
X.init <- X
y <- as.factor(model.response(model.frame(formula, data = data)))
#type des variables X tous numériques
nbNumeric<- sum(sapply(X,is.numeric))
if(nbNumeric<ncol(X)){
stop("Erreur : certaines variables ne sont pas numériques")
}
#############
#Traitements#
#############
#lancer les traitements correspondant aux paramétrages
#paramètres ncomp
#choix du nombre idéal de composantes principales
if(ncomp == "CV") {
ncomp = plslda.cv()$ncomp
}else if(!is.numeric(ncomp) || is.null(ncomp) || ncomp <= 0 || length(ncomp)>1){
stop("Erreur : paramètres ncomp doit être un numériques ")
}else if(ncomp > qr(X)$rank){
ncomp <- qr(X)$rank
}
#####################
#préparer les X et y#
#####################
#si X est a standardiser
if ((round(mean(apply(X,2,mean))) != 0) || (sum(sqrt(apply(X,2,var))) != ncol(X))){
X <- plslda.scale(X)
}
#codage disjonctif de la variable cible
ydum <- plslda.dummies(y)
########
#NIPALS#
########
#Appel de la nipals pour effectuer la regression PLS
nipals.res <- plslda.nipals(X=X, y=ydum, ncomp=ncomp , max.iter=max.iter, tol=tol)
#####
#LDA#
#####
#ici on effectue la LDA pour la classification
#on l'a fait sur nos compossantes principales Th, obtenues en sorties de la PLS
Th <- nipals.res$comp_X
#effectif par classe
n_k <- table(y)
#nombre d'individus
n <- nrow(Th)
#nombre de modalite
K <- nlevels(y)
#nombre de variables desc
p <- ncol(Th)
#proportion par classe
pi_k <- n_k / n
#calcul des moyennes conditionelles - lignes = classes
mb_k <- as.matrix(aggregate(Th,list(y),mean)[,2:(p+1)])
#calcul des matrices de covariances conditionnelles
V_k <- by(as.matrix(Th),list(y),cov)
#matrice de covariance intra-classe W
#calculée à partir des matrices conditionnelles V_k
W <- 1/(n-K) * Reduce("+",lapply(levels(y),function(k){(n_k[k]-1)*V_k[[k]]}))
#inverse de la matrice W
invW <- solve(W)
#calcul des coefficients des variables akj
#pour la fonction de classement
coef_ <- t(mb_k %*% invW)
colnames(coef_) <- levels(y)
intercept_ <- log(pi_k)-0.5*diag(mb_k %*% invW %*% t(mb_k))
######################################
#revenir à toutes les var originelles#
######################################
coef_ <- as.matrix(nipals.res$poid_X)%*%coef_
coef_ <- diag(1/apply(X.init, 2, sd)) %*% coef_
intercept_ <- as.vector(-apply(X.init, 2, mean) %*% coef_) #TODO corriger ce calcul...
#mettre dans un data.frame les coef et constant pour le print
coef <- data.frame(Attributes = colnames(X),coef_)
cte <- data.frame(Attributes = "constant",t(intercept_))
colnames(cte)[1:K+1] <- levels(y)
coef_cte <- rbind(coef,cte)
##################################
#stockage des résultats de sortie#
##################################
res <- list("comp_X"= nipals.res$comp_X,
"poid_X" = nipals.res$poid_X,
"comp_Y" = nipals.res$comp_Y,
"poid_Y" = nipals.res$poid_Y,
"quality" = nipals.res$quality,
"intercept_" = intercept_,
"coef_"=coef_,
"coef_cte" = coef_cte,
"X.init" = X.init,
"y" = y)
class(res)<-"PLSDA"
return(res)
}
plslda.fit(Species~.,iris)
plslda.fit(Species~.,iris)$poid_X
df <- read.csv('/home/pierre/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/zoo.csv', sep=';')
df
plslda.fit(classe~.,df)$poid_X
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
plslda.fit <- function(formula, data,
ncomp = 2, #ici on peut mettre "CV"
max.iter = 100,
tol = 1e-06)
{
###########################
#vérifications des entrées#
###########################
#paramètres renseignés
if ((missing(data) | missing(formula))){
stop("Erreur : formula et data sont les deux paramètres obligatoires")
}
#paramètres formula
if(plyr::is.formula(formula)==F){
stop("Erreur : formula doit etre de type formule")
}
#paramètres data
if (!is.data.frame(data)){
stop("Erreur : data doit être un data.frame")
}
#ligne.s ou colonne.s entièrement vide.s ?
if (any(colSums(!is.na(data)) == 0) | any(rowSums(!is.na(data)) == 0 )){
stop("Erreur : certaines lignes ou colonnes sont entierements manquantes",
"Retirez-les avant de relancer la fonction fit().")
}
#récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
X.init <- X
y <- as.factor(model.response(model.frame(formula, data = data)))
#type des variables X tous numériques
nbNumeric<- sum(sapply(X,is.numeric))
if(nbNumeric<ncol(X)){
stop("Erreur : certaines variables ne sont pas numériques")
}
#############
#Traitements#
#############
#lancer les traitements correspondant aux paramétrages
#paramètres ncomp
#choix du nombre idéal de composantes principales
if(ncomp == "CV") {
ncomp = plslda.cv()$ncomp
}else if(!is.numeric(ncomp) || is.null(ncomp) || ncomp <= 0 || length(ncomp)>1){
stop("Erreur : paramètres ncomp doit être un numériques ")
}else if(ncomp > qr(X)$rank){
ncomp <- qr(X)$rank
}
#####################
#préparer les X et y#
#####################
#si X est a standardiser
if ((round(mean(apply(X,2,mean))) != 0) || (sum(sqrt(apply(X,2,var))) != ncol(X))){
X <- plslda.scale(X)
}
#codage disjonctif de la variable cible
ydum <- plslda.dummies(y)
########
#NIPALS#
########
#Appel de la nipals pour effectuer la regression PLS
nipals.res <- plslda.nipals(X=X, y=ydum, ncomp=ncomp , max.iter=max.iter, tol=tol)
#####
#LDA#
#####
#ici on effectue la LDA pour la classification
#on l'a fait sur nos compossantes principales Th, obtenues en sorties de la PLS
Th <- nipals.res$comp_X
#effectif par classe
n_k <- table(y)
#nombre d'individus
n <- nrow(Th)
#nombre de modalite
K <- nlevels(y)
#nombre de variables desc
p <- ncol(Th)
#proportion par classe
pi_k <- n_k / n
#calcul des moyennes conditionelles - lignes = classes
mb_k <- as.matrix(aggregate(Th,list(y),mean)[,2:(p+1)])
#calcul des matrices de covariances conditionnelles
V_k <- by(as.matrix(Th),list(y),cov)
#matrice de covariance intra-classe W
#calculée à partir des matrices conditionnelles V_k
W <- 1/(n-K) * Reduce("+",lapply(levels(y),function(k){(n_k[k]-1)*V_k[[k]]}))
#inverse de la matrice W
invW <- solve(W)
#calcul des coefficients des variables akj
#pour la fonction de classement
coef_ <- t(mb_k %*% invW)
colnames(coef_) <- levels(y)
intercept_ <- log(pi_k)-0.5*diag(mb_k %*% invW %*% t(mb_k))
######################################
#revenir à toutes les var originelles#
######################################
coef_ <- as.matrix(nipals.res$poid_X)%*%coef_
coef_ <- diag(1/apply(X.init, 2, sd)) %*% coef_
intercept_ <- as.vector(-apply(X.init, 2, mean) %*% coef_) #TODO corriger ce calcul...
#mettre dans un data.frame les coef et constant pour le print
coef <- data.frame(Attributes = colnames(X),coef_)
cte <- data.frame(Attributes = "constant",t(intercept_))
colnames(cte)[1:K+1] <- levels(y)
coef_cte <- rbind(coef,cte)
##################################
#stockage des résultats de sortie#
##################################
res <- list("comp_X"= nipals.res$comp_X,
"poid_X" = nipals.res$poid_X,
"comp_Y" = nipals.res$comp_Y,
"poid_Y" = nipals.res$poid_Y,
"quality" = nipals.res$quality,
"intercept_" = intercept_,
"coef_"=coef_,
"coef_cte" = coef_cte,
"X.init" = X.init,
"y" = y)
class(res)<-"PLSDA"
return(res)
}
df <- read.csv('/home/pierre/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/zoo.csv', sep=';')
plslda.fit(classe~.,df)$poid_X
rownames(plslda.fit(classe~.,df)$poid_X)
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
sel.forward<-function(formula, data, slentry = 0.01, verbose=FALSE){
###########################
#vérifications des entrées#
###########################
#paramètre verbose
if(!is.logical(verbose)){
stop("Erreur : parametre verbose mal rensigné, il doit etre de type logical")
}
#paramètre formula
if(plyr::is.formula(formula)==F){
stop("Erreur : formula doit etre de type formula")
}
#paramètre data
if (!is.data.frame(data)){
stop("Erreur : data doit être un data.frame")
}
X <- as.matrix(model.matrix(formula, data = data)[,-1])
y <- as.factor(model.response(model.frame(formula, data = data)))
nbNumeric<- sum(sapply(X,is.numeric))
if(nbNumeric<ncol(X)){
stop("Erreur : certaines variables ne sont pas numeriques")
}
#######################
#calculs préparatoires#
#######################
#nombre d'obs.
n <- nrow(X)
#nombre d'explicatives
p <- ncol(X)
#nombre de modalités de la cible, y est forcément un factor
K <- nlevels(y)
#modalités
K_values <- levels(y)
#Var.covar conditionnelles
lst_Vk <- lapply(K_values,function(k){m_k <- as.matrix(X[y==k,]);(nrow(m_k)-1)*cov(m_k)})
#matrice W - cov. intra-classes -- biaisée
W <- Reduce("+",lst_Vk)/(n)
#matrice V - cov. totale
V <- (n-1)/n*cov(X)
#################
#début recherche#
#################
curVars <- c() #variables actuellement sélectionnées
candidatsVars <- colnames(X) #variables candidates
curLambda <- 1.0 #pas de var. sél., lambda = 1
q <- 0 #nb. de var. sélectionnées à l'étape courante
#boucler pour rechercher
while (TRUE){
#si pas de variables candidates - on sort
if (length(candidatsVars)==0){
if(verbose){
print("Plus de variables candidates dispo.")
print("Fin du processus")
cat("\n")
}
break
}
if(verbose){
cat(paste("Etape :",(q+1)),"\n")
}
#préparer la structure pour récupérer les résultats
curRes <- matrix(0,nrow=length(candidatsVars),ncol=3)
rownames(curRes) <- candidatsVars
colnames(curRes) <- c("Lambda","F","p-value")
#pour chaque variable candidate
for (v in candidatsVars){
#ajouter la variable candidate à la liste courante
tmpVars <- c(curVars,v)
#former les matrices intermédiaires
tmpW <- as.matrix(W[tmpVars,tmpVars])
tmpV <- as.matrix(V[tmpVars,tmpVars])
#calculer le lambda
tmpLambda <- det(tmpW)/det(tmpV)
#stat. de test
tmpF <- (n-K-q)/(K-1)*(curLambda/tmpLambda-1)
#p-value
tmpPValue <- pf(tmpF,K-1,n-K-q,lower.tail=FALSE)
#stockage
curRes[v,] <- c(tmpLambda,tmpF,tmpPValue)
}
#trier le tableau des résultats selon F décroissant, si + d'une variable
if (nrow(curRes) > 1){curRes <- curRes[order(curRes[,"F"],decreasing=TRUE),]}
#affichage
if(verbose){
print(curRes)
}
#récupérer la meilleure variable (la 1ere puisque triée)... si significative
if (curRes[1,"p-value"] < slentry){
#nom de la variable sélectionnée
theBest <- rownames(curRes)[1]
if(verbose){
print(paste("==> Variable introduite dans le modèle :",theBest))
}
#ajouter la variable dans le pool des sélectionnées
curVars <- c(curVars,theBest)
#supprimer cette variable de la sélection
candidatsVars <- candidatsVars[candidatsVars != theBest]
#màj du nb de var. dans le pool des sélectionnées
q <- q + 1
#màj de lambda
curLambda <- curRes[1,"Lambda"]
} else {
if(verbose){
print("Aucune variable ne répond au critère de sélection")
print("Fin du processus")
}
#this is the end....
break
}
}
########
#sortie#
########
newX <- data.frame(y=y, data[curVars])
yname <- all.vars(formula)[1]
colnames(newX)[1] <- yname
newX
return(newX)
}
sel.forward(Species~., iris)
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
plslda.fit <- function(formula, data,
ncomp = 2, #ici on peut mettre "CV"
max.iter = 100,
tol = 1e-06)
{
###########################
#vérifications des entrées#
###########################
#paramètres renseignés
if ((missing(data) | missing(formula))){
stop("Erreur : formula et data sont les deux paramètres obligatoires")
}
#paramètres formula
if(plyr::is.formula(formula)==F){
stop("Erreur : formula doit etre de type formule")
}
#paramètres data
if (!is.data.frame(data)){
stop("Erreur : data doit être un data.frame")
}
#ligne.s ou colonne.s entièrement vide.s ?
if (any(colSums(!is.na(data)) == 0) | any(rowSums(!is.na(data)) == 0 )){
stop("Erreur : certaines lignes ou colonnes sont entierements manquantes",
"Retirez-les avant de relancer la fonction fit().")
}
#récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
X.init <- X
y <- as.factor(model.response(model.frame(formula, data = data)))
#type des variables X tous numériques
nbNumeric<- sum(sapply(X,is.numeric))
if(nbNumeric<ncol(X)){
stop("Erreur : certaines variables ne sont pas numériques")
}
#############
#Traitements#
#############
#lancer les traitements correspondant aux paramétrages
#paramètres ncomp
#choix du nombre idéal de composantes principales
if(ncomp == "CV") {
ncomp = plslda.cv()$ncomp
}else if(!is.numeric(ncomp) || is.null(ncomp) || ncomp <= 0 || length(ncomp)>1){
stop("Erreur : paramètres ncomp doit être un numériques ")
}else if(ncomp > qr(X)$rank){
ncomp <- qr(X)$rank
}
#####################
#préparer les X et y#
#####################
#si X est a standardiser
if ((round(mean(apply(X,2,mean))) != 0) || (sum(sqrt(apply(X,2,var))) != ncol(X))){
X <- plslda.scale(X)
}
#codage disjonctif de la variable cible
ydum <- plslda.dummies(y)
########
#NIPALS#
########
#Appel de la nipals pour effectuer la regression PLS
nipals.res <- plslda.nipals(X=X, y=ydum, ncomp=ncomp , max.iter=max.iter, tol=tol)
#####
#LDA#
#####
#ici on effectue la LDA pour la classification
#on l'a fait sur nos compossantes principales Th, obtenues en sorties de la PLS
Th <- nipals.res$comp_X
#effectif par classe
n_k <- table(y)
#nombre d'individus
n <- nrow(Th)
#nombre de modalite
K <- nlevels(y)
#nombre de variables desc
p <- ncol(Th)
#proportion par classe
pi_k <- n_k / n
#calcul des moyennes conditionelles - lignes = classes
mb_k <- as.matrix(aggregate(Th,list(y),mean)[,2:(p+1)])
#calcul des matrices de covariances conditionnelles
V_k <- by(as.matrix(Th),list(y),cov)
#matrice de covariance intra-classe W
#calculée à partir des matrices conditionnelles V_k
W <- 1/(n-K) * Reduce("+",lapply(levels(y),function(k){(n_k[k]-1)*V_k[[k]]}))
#inverse de la matrice W
invW <- solve(W)
#calcul des coefficients des variables akj
#pour la fonction de classement
coef_ <- t(mb_k %*% invW)
colnames(coef_) <- levels(y)
intercept_ <- log(pi_k)-0.5*diag(mb_k %*% invW %*% t(mb_k))
######################################
#revenir à toutes les var originelles#
######################################
coef_ <- as.matrix(nipals.res$poid_X)%*%coef_
coef_ <- diag(1/apply(X.init, 2, sd)) %*% coef_
intercept_ <- as.vector(-apply(X.init, 2, mean) %*% coef_) #TODO corriger ce calcul...
#mettre dans un data.frame les coef et constant pour le print
coef <- data.frame(Attributes = colnames(X),coef_)
cte <- data.frame(Attributes = "constant",t(intercept_))
colnames(cte)[1:K+1] <- levels(y)
coef_cte <- rbind(coef,cte)
##################################
#stockage des résultats de sortie#
##################################
res <- list("comp_X"= nipals.res$comp_X,
"poid_X" = nipals.res$poid_X,
"comp_Y" = nipals.res$comp_Y,
"poid_Y" = nipals.res$poid_Y,
"quality" = nipals.res$quality,
"intercept_" = intercept_,
"coef_"=coef_,
"coef_cte" = coef_cte,
"X.init" = X.init,
"y" = y)
class(res)<-"PLSDA"
return(res)
}
plslda.fit(Species~.,iris)
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
runApp('~/Documents/Master/Semestre_1/R/projet/PLSDA_R_Package/Rshiny')
shiny::runApp()
